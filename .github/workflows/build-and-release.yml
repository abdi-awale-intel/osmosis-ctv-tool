name: Build and Release Osmosis

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: windows-latest
    
    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Verify PyUber integration
      run: |
        python -c "import PyUber; print('PyUber imported successfully')"
        
    - name: Build Osmosis executable
      run: |
        python src/build_app.py full
        
    - name: Verify build output
      run: |
        dir src\dist
        if (Test-Path "src\dist\Osmosis.exe") { 
          echo "‚úÖ Osmosis.exe built successfully"
          $size = (Get-Item "src\dist\Osmosis.exe").Length / 1MB
          echo "üì¶ Executable size: $([math]::Round($size, 2)) MB"
        } else { 
          echo "‚ùå Build failed - Osmosis.exe not found"
          exit 1
        }
        
    - name: Create installation package
      run: |
        mkdir release_package
        xcopy /E /I /Y src\dist release_package
        copy README.md release_package\ -ErrorAction SilentlyContinue
        copy config.json release_package\ -ErrorAction SilentlyContinue
        copy core_package\Install_Osmosis.bat release_package\ -ErrorAction SilentlyContinue
        
        echo '@echo off' > release_package\Launch_Osmosis.bat
        echo 'cd /d "%~dp0"' >> release_package\Launch_Osmosis.bat
        echo 'start "" "Osmosis.exe"' >> release_package\Launch_Osmosis.bat
        
    - name: Create ZIP package
      run: |
        $version = if ($env:GITHUB_REF -match 'refs/tags/(.*)') { $matches[1] } else { "dev" }
        $zipName = "Osmosis_${version}_Complete.zip"
        
        Compress-Archive -Path 'release_package\*' -DestinationPath $zipName -CompressionLevel Optimal
        
        $zipSize = (Get-Item $zipName).Length / 1MB
        echo "üì¶ Package created: $zipName"
        echo "üìä Package size: $([math]::Round($zipSize, 2)) MB"
        echo "PACKAGE_NAME=$zipName" >> $env:GITHUB_ENV
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: osmosis-build-artifacts
        path: Osmosis_*_Complete.zip
        retention-days: 30
        
    - name: Upload to release (on tag push)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: Osmosis_*_Complete.zip
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Build Success Notification
      if: needs.build.result == 'success'
      run: |
        echo "‚úÖ Osmosis build completed successfully!"
        echo "üì¶ Package is ready for download"
        
    - name: Build Failure Notification
      if: needs.build.result == 'failure'
      run: |
        echo "‚ùå Osmosis build failed"
        echo "üîç Check the build logs for details"
